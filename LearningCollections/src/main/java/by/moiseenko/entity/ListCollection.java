package by.moiseenko.entity;

import by.moiseenko.utils.PersonAgeComparator;
import by.moiseenko.utils.PersonCreator;
import by.moiseenko.utils.PersonMegaComparator;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.Comparator;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.PriorityQueue;
import java.util.Queue;
import java.util.Stack;
import java.util.Vector;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

public class ListCollection {
  private static final Logger LOG = LogManager.getLogger(ListCollection.class.getName());

  public static void doAction() {
    LOG.debug("**************************ARRAY-LIST COLLECTION*********************");

    List<Person> myArrayList = new ArrayList<>();

    Person youngIvanov = new Person("Ivanov", 12);
    Person oldIvanov = new Person("Ivanov", 68);
    Person youngPetrov = new Person("Petrov", 20);
    Person oldPetrov = new Person("Petrov", 102);
    Person youngSidorov = new Person("Sidorov", 8);
    Person oldSidorov = new Person("Sidorov", 54);

    myArrayList.add(youngIvanov);
    myArrayList.add(oldIvanov);
    myArrayList.add(youngPetrov);
    myArrayList.add(oldPetrov);
    myArrayList.add(youngSidorov);
    myArrayList.add(oldSidorov);

    showAllElementsAndSize(myArrayList);

    myArrayList.addAll(List.of(new Person("Siarhei", 99), new Person("Vitayt", 358)));

    Person[] perArray = myArrayList.toArray(new Person[0]);
    LOG.debug("Array Size: " + perArray.length);
    for (Person p : perArray) {
      LOG.debug("Form Array: " + p);
    }

    Person get3Element = myArrayList.get(3);
    LOG.debug("Get3Element: " + get3Element);

    Person remPerson = myArrayList.set(3, new Person("UnnamedPerson", 666));
    LOG.debug("After set was removed next element: " + remPerson);

    showAllElementsAndSize(myArrayList);

    myArrayList.add(3, oldPetrov);

    showAllElementsAndSize(myArrayList);

    myArrayList.remove(myArrayList.size() - 1);

    showAllElementsAndSize(myArrayList);

    int neededIndex = myArrayList.indexOf(youngPetrov);
    LOG.debug("Index of youngPetrov in list is: " + neededIndex);

    myArrayList.remove(oldPetrov);

    showAllElementsAndSize(myArrayList);

    ((ArrayList<Person>) myArrayList).trimToSize();

    showAllElementsAndSize(myArrayList);
    LOG.debug("*********************RANDOM PERSON GENERATE**************************");
    long startTime, endTime;
    startTime = System.currentTimeMillis();
    PersonCreator pc = new PersonCreator();
    List<Person> autogeneratedList = pc.generatePersonsList(30);
    autogeneratedList.sort(new PersonAgeComparator());
    showAllElementsAndSize(autogeneratedList);
    endTime = System.currentTimeMillis();
    LOG.debug(String.format("Its take: %d ms.", (endTime - startTime)));
    List<Person> unmodList = Collections.unmodifiableList(autogeneratedList);
    ListIterator<Person> personListIterator = autogeneratedList.listIterator(10);
    List<Integer> changedItemPositions = new ArrayList<>();
    while (personListIterator.hasNext()) {
      Person p = personListIterator.next();
      int i = personListIterator.nextIndex();
      if (p.getName().length() > 3) {
        personListIterator.set(new Person("***", 0));
        changedItemPositions.add(i);
      }
    }
    autogeneratedList.sort(Comparator.comparing(p -> p.getName().length()));
    LOG.debug("Collection with name length <=3");
    showAllElementsAndSize(autogeneratedList);
    LOG.debug("Removed items positions" + changedItemPositions);
    LOG.debug(changedItemPositions.size());

    autogeneratedList.removeIf((p) -> (p.getAge() == 0));

    LOG.debug("Collections after remove with for(;;)");
    showAllElementsAndSize(autogeneratedList);

    LOG.debug("*******************Class with collection field and iterator**********");
    CompanyEmployers companyEmployers = new CompanyEmployers(1, 15);
    List<Person> companyPersonsList = companyEmployers.getPersonsList();
    showAllElementsAndSize(companyPersonsList);

    for (Iterator<Person> companyPersonIterator = companyEmployers.iterator();
        companyPersonIterator.hasNext(); ) {
      Person p = companyPersonIterator.next();
      if (p.getAge() > 55) {
        p.setName("TOO OLD");
      }
    }
    LOG.debug("FIRED OLD PERSONS");
    showAllElementsAndSize(companyPersonsList);
    LOG.warn("****************************TEST MEGA COMPARATOR*********************");

    List<Person> oneHundredPersonsList = pc.generatePersonsList(10);
    showAllElementsAndSize(oneHundredPersonsList);

    LOG.info("*****************SORT BY NAME_ALPHABET********************************");
    oneHundredPersonsList.sort(new PersonMegaComparator(PersonEnum.NAME_ALPHABET, false));
    showAllElementsAndSize(oneHundredPersonsList);
    LOG.info("*******************SORT BY NAME_LENGTH********************************");
    oneHundredPersonsList.sort(new PersonMegaComparator(PersonEnum.NAME_LENGTH, false));
    showAllElementsAndSize(oneHundredPersonsList);
    LOG.info("***************************SORT BY AGE********************************");
    oneHundredPersonsList.sort(new PersonMegaComparator(PersonEnum.AGE, false));
    showAllElementsAndSize(oneHundredPersonsList);

    LOG.debug("*****COLLECTION ELEMENTS THAT NOT OVERWRITE EQUALS AND HASHCODE******");
    List<DefaultEqualClass> list1 =
        List.of(
            new DefaultEqualClass(1, "A"),
            new DefaultEqualClass(2, "B"),
            new DefaultEqualClass(3, "C"));
    DefaultEqualClass testInstance = new DefaultEqualClass(2, "B");
    showAllElementsAndSize(list1);
    LOG.debug(
        String.format(
            "%nWill%n%s%nconsist%n%s%n%b", list1, testInstance, list1.contains(testInstance)));

    LOG.debug("**************************LINKED-LIST COLLECTION*********************");

    LinkedList<Person> myLinkedList = new LinkedList<>();
    myLinkedList.add(youngIvanov);
    myLinkedList.add(oldIvanov);
    myLinkedList.add(youngPetrov);
    myLinkedList.add(oldPetrov);
    myLinkedList.add(youngSidorov);
    myLinkedList.add(oldSidorov);

    showAllElementsAndSize(myLinkedList);

    Person getFirstResult = myLinkedList.getFirst();
    Person getLastElement = myLinkedList.getLast();
    LOG.debug(getFirstResult);
    LOG.debug(getLastElement);

    LOG.debug("*************************************************************");
    LinkedList<Character> characters = new LinkedList<>();
    for (int i = 0x41; i < 0x5B; i++) {
      characters.add((char) i);
    }

    for (int i = 0x7A; i > 0x60; i--) {
      characters.addFirst((char) i);
    }
    showAllElementsAndSize(characters);

    LOG.debug("********************Descending Iterator**********************");
    Iterator<Character> charIterator = characters.descendingIterator();
    while (charIterator.hasNext()) {
      LOG.debug(charIterator.next());
    }
    LOG.debug("****************GO BACK WITH LIST ITERATOR********************");
    ListIterator<Character> characterListIterator = characters.listIterator(10);
    while (characterListIterator.hasPrevious()) {
      LOG.debug(characterListIterator.previous());
    }
    LOG.debug("*************************************************************");
    // FIFO = queue
    LOG.debug(characters.poll());
    LOG.debug(characters.pollLast());
    LOG.debug(characters.peek());
    LOG.debug(characters.peekLast());

    while (characters.size() != 0) {
      LOG.debug(characters.poll());
    }
    LOG.debug(characters.poll());

    LOG.debug("**********************PRIORITY QUEUE**********************");
    PriorityQueue<Person> personPriorityQueue =
        new PriorityQueue<>(new PersonMegaComparator(PersonEnum.AGE, true));
    List<Person> personListForPriorityQueue = pc.generatePersonsList(30);
    for (Person p : personListForPriorityQueue) {
      personPriorityQueue.add(p);
    }
    while (personPriorityQueue.size() != 0) {
      LOG.debug(personPriorityQueue.size() + " -=- " + personPriorityQueue.poll());
    }
    LOG.debug("**********************Vector**********************");
    Vector<Integer> vector = new Vector<>();
    for (int i = 0; i <= 10; i++) {
      vector.add(Integer.valueOf(i));
    }
    showAllElementsAndSize(vector);

    LOG.debug("**********************Stack**********************");
    Stack<Integer> stack = new Stack<>();
    for (int i = 0; i <= 10; i++) {
      stack.add(Integer.valueOf(i));
    }
    while (stack.size() != 0) {
      LOG.debug(stack.pop());
    }

    LOG.debug("**********************Linked List like Queue**********************");
    Queue<Person> personQueue = new LinkedList<>();
    personQueue.addAll(pc.generatePersonsList(10));
    personQueue.offer(new Person("asdd", 10));
    personQueue.offer(null);
    while (personQueue.size() != 0) {
      LOG.debug(personQueue.poll());
    }


  }

  private static <T> void showAllElementsAndSize(Collection<T> collection) {
    Iterator<T> myListIterator = collection.iterator();
    while (myListIterator.hasNext()) {
      LOG.debug(myListIterator.next());
    }
    int arraySize = collection.size();
    LOG.debug("arraySize: " + arraySize);
  }
}
