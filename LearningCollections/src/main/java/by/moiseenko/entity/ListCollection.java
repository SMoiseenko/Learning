package by.moiseenko.entity;

import by.moiseenko.utils.PersonCreator;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

public class ListCollection {
  private static final Logger LOG = LogManager.getLogger(ListCollection.class.getName());

  public static void doAction() {
    LOG.debug("**************************ARRAY-LIST COLLECTION*********************");

    List<Person> myArrayList = new ArrayList<>();

    Person youngIvanov = new Person("Ivanov", 12);
    Person oldIvanov = new Person("Ivanov", 68);
    Person youngPetrov = new Person("Petrov", 20);
    Person oldPetrov = new Person("Petrov", 102);
    Person youngSidorov = new Person("Sidorov", 8);
    Person oldSidorov = new Person("Sidorov", 54);

    myArrayList.add(youngIvanov);
    myArrayList.add(oldIvanov);
    myArrayList.add(youngPetrov);
    myArrayList.add(oldPetrov);
    myArrayList.add(youngSidorov);
    myArrayList.add(oldSidorov);

    showAllElementsAndSize(myArrayList);

    myArrayList.addAll(List.of(new Person("Siarhei", 99), new Person ("Vitayt", 358)));


    Person[] perArray = myArrayList.toArray(new Person[0]);
    LOG.debug("Array Size: " + perArray.length);
    for(Person p : perArray){
      LOG.debug("Form Array: " + p);
    }


    Person get3Element = myArrayList.get(3);
    LOG.debug("Get3Element: " + get3Element);

   Person remPerson =  myArrayList.set(3, new Person("UnnamedPerson", 666));
   LOG.debug("After set was removed next element: " + remPerson);

    showAllElementsAndSize(myArrayList);

    myArrayList.add(3, oldPetrov);

    showAllElementsAndSize(myArrayList);

    myArrayList.remove(myArrayList.size() - 1);

    showAllElementsAndSize(myArrayList);

    int neededIndex = myArrayList.indexOf(youngPetrov);
    LOG.debug("Index of youngPetrov in list is: " + neededIndex);

    myArrayList.remove(oldPetrov);

    showAllElementsAndSize(myArrayList);

    ((ArrayList<Person>)myArrayList).trimToSize();

    showAllElementsAndSize(myArrayList);
    LOG.debug("*********************RANDOM PERSON GENERATE**************************");
    PersonCreator pc = new PersonCreator();
    List<Person> autogeneratedList = pc.generatePersonsList(30);
    showAllElementsAndSize(autogeneratedList);

    LOG.debug("**************************LINKED-LIST COLLECTION*********************");

    LinkedList<Person> myLinkedList = new LinkedList<>();
    myLinkedList.add(youngIvanov);
    myLinkedList.add(oldIvanov);
    myLinkedList.add(youngPetrov);
    myLinkedList.add(oldPetrov);
    myLinkedList.add(youngSidorov);
    myLinkedList.add(oldSidorov);

    showAllElementsAndSize(myLinkedList);

    Person getFirstResult = myLinkedList.getFirst();

    LOG.debug("*************************************************************");
  }

  private static<T extends Person> void showAllElementsAndSize(List<T> myArrayList) {
    Iterator<T> myListIterator = myArrayList.listIterator();
    while (myListIterator.hasNext()) {
      LOG.debug(myListIterator.next());
    }
    int arraySize = myArrayList.size();
    LOG.debug("arraySize: " + arraySize);
  }
}
